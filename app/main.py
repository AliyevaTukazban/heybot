
from fastapi import FastAPI, HTTPException
import os
from meme_generator import create_meme
from analyzer import load_trivy_report, analyze_logs
from discord_webhook import DiscordWebhook, DiscordEmbed
import aiohttp
import logging

# Logging-Konfiguration
logging.basicConfig(level=logging.DEBUG)

app = FastAPI()

# Discord Webhook URL (set in .env file)
# DISCORD_WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL")

DISCORD_WEBHOOK_URL='https://discord.com/api/webhooks/1358542446031798624/S-90hr030GtqcMqfWg6rr5YWlQO7qVcZHK0RyvyyQUDq6Y6r54lliQ8XpEoLsmgdEtTi'

@app.post("/analyze_trivy_logs/")
async def analyze_trivy_logs():
    try:
        # Load the Trivy scan result (generated by GitHub Actions)
        trivy_report = load_trivy_report("trivy_output.json")
        logging.debug(f"Trivy Report: {trivy_report}")

        # Analyze logs (you can customize this further)
        results = analyze_logs(trivy_report)
        logging.debug(f"Analysis Results: {results}")

        # Generate meme based on vulnerability severity
        meme_path = create_meme(results['vuln_name'], results['severity'])
        logging.debug(f"Meme Path: {meme_path}")

        # Send Discord notification with meme
        await send_discord_notification(results)

        return {"message": "Logs analyzed and meme created!"}

    except Exception as e:
        logging.error(f"Error during analysis: {e}")
        raise HTTPException(status_code=500, detail=f"Internal Server Error: {e}")

# Asynchronous Discord notification with meme
async def send_discord_notification(results):
    try:
        # Check if the webhook URL is configured
        if not DISCORD_WEBHOOK_URL:
            logging.error("Discord Webhook URL is not set.")
            raise HTTPException(status_code=500, detail="Discord Webhook URL is not set.")

        # Build a funny message using vulnerability results
        funny_message = (
            f"üõ°Ô∏è YoBot Report is here!\n\n"
            f"üîç Something suspicious popped up in the container...\n"
            f"üî• **{results.get('vuln_name', 'Unknown vulnerability')}** ‚Äì sounds dangerous, right?\n"
            f"üß® Severity: **{results.get('severity', 'Not specified')}**\n"
            f"üí° Suggestion: Maybe just unplug the server? üòÖ"
        )

        # Create the payload for Discord
        payload = {
            "content": funny_message
        }

        # Send the POST request to Discord
        async with aiohttp.ClientSession() as session:
            async with session.post(DISCORD_WEBHOOK_URL, json=payload) as response:
                if response.status in [200, 204]:
                    logging.info("Funny Discord message sent successfully!")
                else:
                    text = await response.text()
                    logging.error(f"Discord error {response.status}: {text}")
                    raise HTTPException(status_code=500, detail=f"Discord error {response.status}: {text}")

    except Exception as e:
        logging.error(f"Error sending Discord notification: {e}")
        raise HTTPException(status_code=500, detail=f"Error sending Discord notification: {e}")